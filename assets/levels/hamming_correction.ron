Level(
    id: "12beb169-a85c-4235-98eb-3851864a61f8",
    name: "Hamming Correction",
    description: "
        Given the four data and three parity bits, as encoded by your Hamming Generation level solution, output the error corrected data bits and send a signal to ERR if an error was corrected. At most one bit flip will be present.
        
        Also here are the parity bit definitions again (⊕ for XOR).
        P1 = D1 ⊕ D2 ⊕ D4
        P2 = D1 ⊕ D3 ⊕ D4
        P3 = D2 ⊕ D3 ⊕ D4",
    children: [ ],

    labels: {
        Dynamic(0): "P1",
        Dynamic(1): "P2",
        Dynamic(2): "D1",
        Dynamic(3): "P3",
        Dynamic(4): "D2",
        Dynamic(5): "D3",
        Dynamic(6): "D4",

        Dynamic(7): "D1",
        Dynamic(8): "D2",
        Dynamic(9): "D3",
        Dynamic(10): "D4",
        Dynamic(11): "ERR"
    },
    tiles: {
        (0, 5): Emitter( rotation: Down, active: true, id: 0 ),
        (1, 5): Emitter( rotation: Down, active: true, id: 1 ),
        (2, 5): Emitter( rotation: Down, active: true, id: 2 ),
        (3, 5): Emitter( rotation: Down, active: true, id: 3 ),
        (4, 5): Emitter( rotation: Down, active: true, id: 4 ),
        (5, 5): Emitter( rotation: Down, active: true, id: 5 ),
        (6, 5): Emitter( rotation: Down, active: true, id: 6 ),

        (0, 0): Detector( id: 7 ),
        (1, 0): Detector( id: 8 ),
        (2, 0): Detector( id: 9 ),
        (3, 0): Detector( id: 10 ),
        (5, 0): Detector( id: 11 )
    },

    tests: Tests(
        lasers: [ 0, 1, 2, 3, 4, 5, 6 ],
        detectors: [ 7, 8, 9, 10, 11 ],
        display: DisplayConfig(
            detector_spaces: [ 3 ],
            descriptions: {
                0: "No bits were flipped.",
                1: "Flipped bit D2.",
                2: "Flipped bit D4.",
                3: "Flipped bit D3.",
                4: "Flipped bit D1.",
                5: "Flipped bit D4.",
                6: "Flipped bit P1.",
                7: "Flipped bit D3.",
                8: "Flipped bit P1.",
                9: "Flipped bit P3.",
                10: "Flipped bit P3.",
                11: "Flipped bit P1.",
                12: "Flipped bit P3.",
                13: "Flipped bit D2.",
                14: "Flipped bit P2.",
                15: "Flipped bit P2."
            }
        ),

        cases: [
            Cycle( lasers: [ true,  false, false, true,  true,  false, false ], detectors: [ [ false, true,  false, false, false ] ] ),
            Cycle( lasers: [ true,  false, true,  true,  true,  true,  false ], detectors: [ [ true,  false, true,  false, true  ] ] ),
            Cycle( lasers: [ false, true,  true,  true,  true,  false, true  ], detectors: [ [ true,  true,  false, false, true  ] ] ),
            Cycle( lasers: [ true,  false, true,  true,  false, false, false ], detectors: [ [ true,  false, true,  false, true  ] ] ),
            Cycle( lasers: [ true,  false, true,  false, false, true,  true  ], detectors: [ [ false, false, true,  true,  true  ] ] ),
            Cycle( lasers: [ false, true,  false, true,  false, true,  true  ], detectors: [ [ false, false, true,  false, true  ] ] ),
            Cycle( lasers: [ true,  false, false, true,  true,  true,  true  ], detectors: [ [ false, true,  true,  true,  true  ] ] ),
            Cycle( lasers: [ true,  true,  true,  true,  true,  false, true  ], detectors: [ [ true,  true,  true,  true,  true  ] ] ),
            Cycle( lasers: [ false, true,  true,  false, false, false, false ], detectors: [ [ true,  false, false, false, true  ] ] ),
            Cycle( lasers: [ false, false, true,  true,  true,  true,  false ], detectors: [ [ true,  true,  true,  false, true  ] ] ),
            Cycle( lasers: [ true,  false, false, true,  false, true,  true  ], detectors: [ [ false, false, true,  true,  true  ] ] ),
            Cycle( lasers: [ true,  false, false, false, false, false, false ], detectors: [ [ false, false, false, false, true  ] ] ),
            Cycle( lasers: [ false, true,  false, true,  true,  false, true  ], detectors: [ [ false, true,  false, true,  true  ] ] ),
            Cycle( lasers: [ false, true,  true,  false, true,  true,  true  ], detectors: [ [ true,  false, true,  true,  true  ] ] ),
            Cycle( lasers: [ false, true,  true,  true,  false, false, true  ], detectors: [ [ true,  false, false, true,  true  ] ] ),
            Cycle( lasers: [ true,  true,  true,  false, true,  false, true  ], detectors: [ [ true,  true,  false, true,  true  ] ] ),
        ]
    )
)

// Generated with the following code:
//
// let mut rng = rand::rng();
// for _ in 0..16 {
//     let [mut d1, mut d2, mut d3, mut d4]: [bool; 4] = [rng.random(), rng.random(), rng.random(), rng.random()];
//     let [od1, od2, od3, od4] = [d1, d2, d3, d4];
//     let [mut p1, mut p2, mut p3] = [d1 ^ d2 ^ d4, d1 ^ d3 ^ d4, d2 ^ d3 ^ d4];
//     let error = rng.random_range(0..=7);
//
//     const BIT_NAMES: &[&str] = &["D1", "D2", "D3", "D4", "P1", "P2", "P3"];
//     if error != 7 {
//         println!("Flipped bit {}.", BIT_NAMES[error]);
//     } else {
//         println!("No bits were flipped.")
//     }
//
//     match error {
//         0 => d1 ^= true,
//         1 => d2 ^= true,
//         2 => d3 ^= true,
//         3 => d4 ^= true,
//         4 => p1 ^= true,
//         5 => p2 ^= true,
//         6 => p3 ^= true,
//         _ => {}
//     }
//
//     let (p1, p2, d1, p3, d2, d3, d4, od1, od2, od3, od4) = (p1 as u8, p2 as u8, d1 as u8, p3 as u8, d2 as u8, d3 as u8, d4 as u8, od1 as u8, od2 as u8, od3 as u8, od4 as u8);
//     println!("{p1}{p2}{d1}{p3}{d2}{d3}{d4} → {od1}{od2}{od3}{od4}{}", (error != 7) as u8);
// }
