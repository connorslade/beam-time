Level(
    id: "a2f4358f-b86e-45da-b4cb-23c5819a79e7",
    name: "Hamming Generation",
    description: "
        Hamming codes are a type of error correcting code, they can detect if one or two bits were flipped, and if only one was flipped they can determine which bit was flipped.
        
        For a four bit message, hamming codes require three parity bits, although with larger message sizes the percent parity approaches zero.
        
        The parity bits are defined as follows, where the ⊕ symbol represents XOR:
        
        p1 = d1 ⊕ d2 ⊕ d4
        p2 = d1 ⊕ d3 ⊕ d4
        p3 = d2 ⊕ d3 ⊕ d4",
    parents: [ "c98218bd-937b-4a60-a94c-a51d677c61b1" ], // ← parity_bit

    labels: {
        Dynamic(0): "d1",
        Dynamic(1): "d2",
        Dynamic(2): "d3",
        Dynamic(3): "d4",

        Dynamic(4): "p1",
        Dynamic(5): "p2",
        Dynamic(6): "d1",
        Dynamic(7): "p3",
        Dynamic(8): "d2",
        Dynamic(9): "d3",
        Dynamic(10): "d4"
    },
    tiles: {
        (0, 5): Emitter( rotation: Down, active: true, id: 0 ),
        (1, 5): Emitter( rotation: Down, active: true, id: 1 ),
        (2, 5): Emitter( rotation: Down, active: true, id: 2 ),
        (3, 5): Emitter( rotation: Down, active: true, id: 3 ),

        (0, 0): Detector( id: 4 ),
        (1, 0): Detector( id: 5 ),
        (2, 0): Detector( id: 6 ),
        (3, 0): Detector( id: 7 ),
        (4, 0): Detector( id: 8 ),
        (5, 0): Detector( id: 9 ),
        (6, 0): Detector( id: 10 ),
    },

    tests: Tests(
        lasers: [ 0, 1, 2, 3 ],
        detectors: [ 4, 5, 6, 7, 8, 9, 10 ],

        cases: [
            Cycle( lasers: [ true,  false, false, false ], detectors: [ [ true,  true,  true,  false, false, false, false ] ] ),
            Cycle( lasers: [ true,  false, false, false ], detectors: [ [ true,  true,  true,  false, false, false, false ] ] ),
            Cycle( lasers: [ true,  true,  true,  true  ], detectors: [ [ true,  true,  true,  true,  true,  true,  true  ] ] ),
            Cycle( lasers: [ false, false, true,  false ], detectors: [ [ false, true,  false, true,  false, true,  false ] ] ),
            Cycle( lasers: [ false, true,  false, false ], detectors: [ [ true,  false, false, true,  true,  false, false ] ] ),
            Cycle( lasers: [ true,  false, true,  false ], detectors: [ [ true,  false, true,  true,  false, true,  false ] ] ),
            Cycle( lasers: [ true,  false, false, false ], detectors: [ [ true,  true,  true,  false, false, false, false ] ] ),
            Cycle( lasers: [ true,  true,  false, true  ], detectors: [ [ true,  false, true,  false, true,  false, true  ] ] ),
            Cycle( lasers: [ true,  true,  false, false ], detectors: [ [ false, true,  true,  true,  true,  false, false ] ] ),
            Cycle( lasers: [ false, false, true,  true  ], detectors: [ [ true,  false, false, false, false, true,  true  ] ] ),
            Cycle( lasers: [ false, false, false, false ], detectors: [ [ false, false, false, false, false, false, false ] ] ),
            Cycle( lasers: [ true,  true,  true,  false ], detectors: [ [ false, false, true,  false, true,  true,  false ] ] ),
            Cycle( lasers: [ true,  true,  true,  true  ], detectors: [ [ true,  true,  true,  true,  true,  true,  true  ] ] ),
            Cycle( lasers: [ true,  false, false, false ], detectors: [ [ true,  true,  true,  false, false, false, false ] ] ),
            Cycle( lasers: [ true,  true,  false, false ], detectors: [ [ false, true,  true,  true,  true,  false, false ] ] ),
            Cycle( lasers: [ true,  true,  true,  false ], detectors: [ [ false, false, true,  false, true,  true,  false ] ] ),
        ]
    )
)

// Generated with the following code:
// let mut rng = rand::rng();
// for _ in 0..16 {
//     let [d1, d2, d3, d4]: [bool; 4] = [rng.random(), rng.random(), rng.random(), rng.random()];
//     let (p1, p2, p3) = (d1 ^ d2 ^ d4, d1 ^ d3 ^ d4, d2 ^ d3 ^ d4);
    
//     let (p1, p2, d1, p3, d2, d3, d4) = (p1 as u8, p2 as u8, d1 as u8, p3 as u8, d2 as u8, d3 as u8, d4 as u8);
//     println!("{d1}{d2}{d3}{d4} → {p1}{p2}{d1}{p3}{d2}{d3}{d4}");
// }