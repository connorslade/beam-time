Level(
    id: "f90f9889-e68a-40e9-9fef-83ff0324808d",
    name: "Grey Decode",
    description: "",
    parents: [ "ea9291be-554b-451f-9699-b2f410c02af1" ], // ← grey_encode

    tiles: {
        (0, 9): Emitter( rotation: Down, active: true, id: 0 ),
        (1, 9): Emitter( rotation: Down, active: true, id: 1 ),
        (2, 9): Emitter( rotation: Down, active: true, id: 2 ),
        (3, 9): Emitter( rotation: Down, active: true, id: 3 ),
        (4, 9): Emitter( rotation: Down, active: true, id: 4 ),
        (5, 9): Emitter( rotation: Down, active: true, id: 5 ),
        (6, 9): Emitter( rotation: Down, active: true, id: 6 ),
        (7, 9): Emitter( rotation: Down, active: true, id: 7 ),

        (0, 0): Detector( id: 8 ),
        (1, 0): Detector( id: 9 ),
        (2, 0): Detector( id: 10 ),
        (3, 0): Detector( id: 11 ),
        (4, 0): Detector( id: 12 ),
        (5, 0): Detector( id: 13 ),
        (6, 0): Detector( id: 14 ),
        (7, 0): Detector( id: 15 ),
    },

    tests: Tests(
        lasers: [ 0, 1, 2, 3, 4, 5, 6, 7 ],
        detectors: [ 8, 9, 10, 11, 12, 13, 14, 15 ],

        cases: [
            Cycle( lasers: [ true,  false, true,  false, false, true,  false, false ], detectors: [ [ true,  true,  false, false, false, true,  true,  true  ] ] ),
            Cycle( lasers: [ true,  false, true,  true,  true,  false, false, true  ], detectors: [ [ true,  true,  false, true,  false, false, false, true  ] ] ),
            Cycle( lasers: [ true,  true,  false, true,  true,  true,  true,  true  ], detectors: [ [ true,  false, false, true,  false, true,  false, true  ] ] ),
            Cycle( lasers: [ true,  true,  false, false, true,  false, false, false ], detectors: [ [ true,  false, false, false, true,  true,  true,  true  ] ] ),
            Cycle( lasers: [ false, true,  true,  false, true,  true,  true,  false ], detectors: [ [ false, true,  false, false, true,  false, true,  true  ] ] ),
            Cycle( lasers: [ false, true,  false, false, false, false, false, false ], detectors: [ [ false, true,  true,  true,  true,  true,  true,  true  ] ] ),
            Cycle( lasers: [ false, true,  false, true,  true,  false, true,  false ], detectors: [ [ false, true,  true,  false, true,  true,  false, false ] ] ),
            Cycle( lasers: [ true,  true,  false, true,  true,  false, true,  false ], detectors: [ [ true,  false, false, true,  false, false, true,  true  ] ] ),
            Cycle( lasers: [ true,  false, true,  false, false, false, true,  true  ], detectors: [ [ true,  true,  false, false, false, false, true,  false ] ] ),
            Cycle( lasers: [ true,  true,  false, false, false, false, false, true  ], detectors: [ [ true,  false, false, false, false, false, false, true  ] ] ),
            Cycle( lasers: [ false, false, true,  true,  false, true,  true,  true  ], detectors: [ [ false, false, true,  false, false, true,  false, true  ] ] ),
            Cycle( lasers: [ true,  true,  false, true,  false, false, true,  false ], detectors: [ [ true,  false, false, true,  true,  true,  false, false ] ] ),
            Cycle( lasers: [ false, false, false, true,  true,  true,  false, true  ], detectors: [ [ false, false, false, true,  false, true,  true,  false ] ] ),
            Cycle( lasers: [ true,  false, true,  true,  true,  true,  true,  false ], detectors: [ [ true,  true,  false, true,  false, true,  false, false ] ] ),
            Cycle( lasers: [ true,  true,  false, true,  true,  true,  false, false ], detectors: [ [ true,  false, false, true,  false, true,  true,  true  ] ] ),
            Cycle( lasers: [ true,  true,  false, false, false, true,  true,  true  ], detectors: [ [ true,  false, false, false, false, true,  false, true  ] ] ),
        ]
    )
)

// Test cases generated with the following code:
// let mut rng = rand::rng();
// for _ in 0..16 {
//     let grey = rng.random::<u8>();
//     let bin = grey_to_binary(grey);

//     println!("{grey:0>8b} → {bin:0>8b}");
// }

// fn grey_to_binary(mut num: u8) -> u8 {
//     num ^= num >>  4;
//     num ^= num >>  2;
//     num ^= num >>  1;
// num
}
