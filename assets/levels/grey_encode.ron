Level(
    id: "ea9291be-554b-451f-9699-b2f410c02af1",
    name: "Grey Encode",
    description: "
        Devices like rotary encoders use a series of switches to represent position. With standard binary, going from 3 (011) to 4 (100) changes three bits. Since physical switches don't change instantly, this can cause erroneous intermediate readings.
        
        Gray code solves this. In Gray code, suscsesive values only differ by a single bit.
        
        To convert a binary number to Grey code, every bit should be XORed with the bit to its left (more significant).",
    parents: [ "45052dc5-0d3a-449d-b153-19a608ae52f1" ], // ‚Üê binary_decoder

    labels: {
        Dynamic(0): "128",
        Dynamic(1): "64",
        Dynamic(2): "32",
        Dynamic(3): "16",
        Dynamic(4): "8",
        Dynamic(5): "4",
        Dynamic(6): "2",
        Dynamic(7): "1",

        Dynamic(8): "8",
        Dynamic(9): "7",
        Dynamic(10): "6",
        Dynamic(11): "5",
        Dynamic(12): "4",
        Dynamic(13): "3",
        Dynamic(14): "2",
        Dynamic(15): "1",
    },
    tiles: {
        (0, 5): Emitter( rotation: Down, active: true, id: 0 ),
        (1, 5): Emitter( rotation: Down, active: true, id: 1 ),
        (2, 5): Emitter( rotation: Down, active: true, id: 2 ),
        (3, 5): Emitter( rotation: Down, active: true, id: 3 ),
        (4, 5): Emitter( rotation: Down, active: true, id: 4 ),
        (5, 5): Emitter( rotation: Down, active: true, id: 5 ),
        (6, 5): Emitter( rotation: Down, active: true, id: 6 ),
        (7, 5): Emitter( rotation: Down, active: true, id: 7 ),

        (0, 0): Detector( id: 8 ),
        (1, 0): Detector( id: 9 ),
        (2, 0): Detector( id: 10 ),
        (3, 0): Detector( id: 11 ),
        (4, 0): Detector( id: 12 ),
        (5, 0): Detector( id: 13 ),
        (6, 0): Detector( id: 14 ),
        (7, 0): Detector( id: 15 ),
    },

    tests: Tests(
        lasers: [ 0, 1, 2, 3, 4, 5, 6, 7 ],
        detectors: [ 8, 9, 10, 11, 12, 13, 14, 15 ],

        cases: [
            Cycle( lasers: [ true,  true,  false, false, false, true,  true,  true  ], detectors: [ [ true,  false, true,  false, false, true,  false, false ] ] ),
            Cycle( lasers: [ true,  false, false, true,  false, false, true,  true  ], detectors: [ [ true,  true,  false, true,  true,  false, true,  false ] ] ),
            Cycle( lasers: [ false, false, true,  true,  true,  true,  false, true  ], detectors: [ [ false, false, true,  false, false, false, true,  true  ] ] ),
            Cycle( lasers: [ false, true,  true,  false, true,  true,  false, true  ], detectors: [ [ false, true,  false, true,  true,  false, true,  true  ] ] ),
            Cycle( lasers: [ false, true,  false, false, true,  true,  true,  true  ], detectors: [ [ false, true,  true,  false, true,  false, false, false ] ] ),
            Cycle( lasers: [ false, true,  false, true,  false, false, false, false ], detectors: [ [ false, true,  true,  true,  true,  false, false, false ] ] ),
            Cycle( lasers: [ false, false, true,  true,  true,  true,  false, true  ], detectors: [ [ false, false, true,  false, false, false, true,  true  ] ] ),
            Cycle( lasers: [ true,  false, true,  true,  false, true,  false, true  ], detectors: [ [ true,  true,  true,  false, true,  true,  true,  true  ] ] ),
            Cycle( lasers: [ false, false, true,  false, true,  false, false, true  ], detectors: [ [ false, false, true,  true,  true,  true,  false, true  ] ] ),
            Cycle( lasers: [ false, false, false, true,  false, true,  false, false ], detectors: [ [ false, false, false, true,  true,  true,  true,  false ] ] ),
            Cycle( lasers: [ true,  true,  false, true,  true,  true,  true,  false ], detectors: [ [ true,  false, true,  true,  false, false, false, true  ] ] ),
            Cycle( lasers: [ true,  true,  false, true,  false, false, false, false ], detectors: [ [ true,  false, true,  true,  true,  false, false, false ] ] ),
            Cycle( lasers: [ true,  false, true,  true,  true,  true,  true,  true  ], detectors: [ [ true,  true,  true,  false, false, false, false, false ] ] ),
            Cycle( lasers: [ false, false, false, true,  true,  false, true,  true  ], detectors: [ [ false, false, false, true,  false, true,  true,  false ] ] ),
            Cycle( lasers: [ true,  false, false, true,  true,  false, false, true  ], detectors: [ [ true,  true,  false, true,  false, true,  false, true  ] ] ),
            Cycle( lasers: [ true,  true,  true,  false, true,  true,  true,  true  ], detectors: [ [ true,  false, false, true,  true,  false, false, false ] ] ),
        ]
    )
)

// Test cases generated with the following code:
// let mut rng = rand::rng();
// for _ in 0..16 {
//     let i = rng.random::<u8>();
//     let grey = binary_to_grey(i);

//     println!("{i:0>8b} = {grey:0>8b}");
// }

// fn binary_to_grey(num: u8) -> u8 {
//     num ^ (num >> 1)
// }
