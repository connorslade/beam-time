Level(
    id: "52108765-b8d2-47cf-a0c7-36b3b73cc644",
    name: "Double It",
    description: "
        In the decimal system, each digit's place is 10x greater than the one to its right (1s, 10s, 100s). Digital systems use binary, where each place is 2x greater (1s, 2s, 4s, 8s, etc.) and every digit is just a 0 or a 1. For example, the binary number 10100 is equal to 20 in decimal (1*16 + 0*8 + 1*4 + 0*2 + 0*1).
        
        For this level, output double the numeric value of the binary inputs. This is a simple operation, just like how multiplying by ten is in decimal.",
    children: [ "91d5f245-75e8-4d3e-8994-7dcbdcd70670", "c98218bd-937b-4a60-a94c-a51d677c61b1", "2f854277-df80-4ee8-b5ab-69f7d6587ff4", "86456173-e27c-4918-ae11-ef5a36147037" ], // ← half_adder, parity_bit, synchronization

    size: (8, 5),
    permanent: [
        (0, 4), (1, 4), (2, 4), (3, 4), (4, 4), (5, 4), (6, 4), (7, 4),
        (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0)
    ],
    labels: {
        Dynamic(0): "128",
        Dynamic(1): "64",
        Dynamic(2): "32",
        Dynamic(3): "16",
        Dynamic(4): "8",
        Dynamic(5): "4",
        Dynamic(6): "2",
        Dynamic(7): "1",

        Dynamic(8): "128",
        Dynamic(9): "64",
        Dynamic(10): "32",
        Dynamic(11): "16",
        Dynamic(12): "8",
        Dynamic(13): "4",
        Dynamic(14): "2",
        Dynamic(15): "1"
    },
    tiles: {
        (0, 4): Emitter( rotation: Down, active: true, id: 0 ),
        (1, 4): Emitter( rotation: Down, active: true, id: 1 ),
        (2, 4): Emitter( rotation: Down, active: true, id: 2 ),
        (3, 4): Emitter( rotation: Down, active: true, id: 3 ),
        (4, 4): Emitter( rotation: Down, active: true, id: 4 ),
        (5, 4): Emitter( rotation: Down, active: true, id: 5 ),
        (6, 4): Emitter( rotation: Down, active: true, id: 6 ),
        (7, 4): Emitter( rotation: Down, active: true, id: 7 ),

        (0, 0): Detector( id: 8 ),
        (1, 0): Detector( id: 9 ),
        (2, 0): Detector( id: 10 ),
        (3, 0): Detector( id: 11 ),
        (4, 0): Detector( id: 12 ),
        (5, 0): Detector( id: 13 ),
        (6, 0): Detector( id: 14 ),
        (7, 0): Detector( id: 15 )
    },

    tests: Tests(
        lasers: [ 0, 1, 2, 3, 4, 5, 6, 7 ],
        detectors: [ 8, 9, 10, 11, 12, 13, 14, 15 ],
        display: DisplayConfig(
            descriptions: {
                0: "00011110 (30) x2 = 00111100 (60)",
                1: "00010010 (18) x2 = 00100100 (36)",
                2: "01011101 (93) x2 = 10111010 (186)",
                3: "01000011 (67) x2 = 10000110 (134)",
                4: "01110111 (119) x2 = 11101110 (238)",
                5: "01111111 (127) x2 = 11111110 (254)",
                6: "00101111 (47) x2 = 01011110 (94)",
                7: "00111110 (62) x2 = 01111100 (124)",
                8: "01011010 (90) x2 = 10110100 (180)",
                9: "01100101 (101) x2 = 11001010 (202)",
                10: "01110100 (116) x2 = 11101000 (232)",
                11: "00110001 (49) x2 = 01100010 (98)",
                12: "01010110 (86) x2 = 10101100 (172)",
                13: "00110101 (53) x2 = 01101010 (106)",
                14: "01000100 (68) x2 = 10001000 (136)",
                15: "00010111 (23) x2 = 00101110 (46)"
            }
        ),
        
        cases: [
            Cycle( lasers: [ false, false, false, true,  true,  true,  true,  false ], detectors: [ [ false, false, true,  true,  true,  true,  false, false ] ] ),
            Cycle( lasers: [ false, false, false, true,  false, false, true,  false ], detectors: [ [ false, false, true,  false, false, true,  false, false ] ] ),
            Cycle( lasers: [ false, true,  false, true,  true,  true,  false, true  ], detectors: [ [ true,  false, true,  true,  true,  false, true,  false ] ] ),
            Cycle( lasers: [ false, true,  false, false, false, false, true,  true  ], detectors: [ [ true,  false, false, false, false, true,  true,  false ] ] ),
            Cycle( lasers: [ false, true,  true,  true,  false, true,  true,  true  ], detectors: [ [ true,  true,  true,  false, true,  true,  true,  false ] ] ),
            Cycle( lasers: [ false, true,  true,  true,  true,  true,  true,  true  ], detectors: [ [ true,  true,  true,  true,  true,  true,  true,  false ] ] ),
            Cycle( lasers: [ false, false, true,  false, true,  true,  true,  true  ], detectors: [ [ false, true,  false, true,  true,  true,  true,  false ] ] ),
            Cycle( lasers: [ false, false, true,  true,  true,  true,  true,  false ], detectors: [ [ false, true,  true,  true,  true,  true,  false, false ] ] ),
            Cycle( lasers: [ false, true,  false, true,  true,  false, true,  false ], detectors: [ [ true,  false, true,  true,  false, true,  false, false ] ] ),
            Cycle( lasers: [ false, true,  true,  false, false, true,  false, true  ], detectors: [ [ true,  true,  false, false, true,  false, true,  false ] ] ),
            Cycle( lasers: [ false, true,  true,  true,  false, true,  false, false ], detectors: [ [ true,  true,  true,  false, true,  false, false, false ] ] ),
            Cycle( lasers: [ false, false, true,  true,  false, false, false, true  ], detectors: [ [ false, true,  true,  false, false, false, true,  false ] ] ),
            Cycle( lasers: [ false, true,  false, true,  false, true,  true,  false ], detectors: [ [ true,  false, true,  false, true,  true,  false, false ] ] ),
            Cycle( lasers: [ false, false, true,  true,  false, true,  false, true  ], detectors: [ [ false, true,  true,  false, true,  false, true,  false ] ] ),
            Cycle( lasers: [ false, true,  false, false, false, true,  false, false ], detectors: [ [ true,  false, false, false, true,  false, false, false ] ] ),
            Cycle( lasers: [ false, false, false, true,  false, true,  true,  true  ], detectors: [ [ false, false, true,  false, true,  true,  true,  false ] ] )
        ]
    )
)

// Cases generated with the following code and find+replace:
//
// let mut rng = rand::rng();
// for i in 0..16 {
//     let input = (rng.random::<u8>() << 1) >> 1;
//     let out = (input << 1);

//     println!("{input:08b} ({input}) x2 = {out:08b} ({out})");
//     println!("{input:08b} → {out:08b}");
// }
