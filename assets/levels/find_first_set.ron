Level(
    id: "eaab5121-8a05-49fd-8f6b-e364dd34bf48",
    name: "Find First Set",
    description: "
        Return the index or position (starting with zero) of the least significant bit set to one. This is equivalent to counting the number of trailing zeros.
        
        You can assume every test case will have at least one bit set.",
    children: [ "b59c1a75-8d7a-4c91-bdd4-6831e3b1f41a", "fff0fee3-8c27-4230-bc9c-eb49156dd50e" ], // ← count_ones, comparator

    labels: {
        Dynamic(0): "128",
        Dynamic(1): "64",
        Dynamic(2): "32",
        Dynamic(3): "16",
        Dynamic(4): "8",
        Dynamic(5): "4",
        Dynamic(6): "2",
        Dynamic(7): "1",

        Dynamic(8): "4",
        Dynamic(9): "2",
        Dynamic(10): "1",
    },
    tiles: {
        (0, 4): Emitter( rotation: Down, active: true, id: 0 ),
        (1, 4): Emitter( rotation: Down, active: true, id: 1 ),
        (2, 4): Emitter( rotation: Down, active: true, id: 2 ),
        (3, 4): Emitter( rotation: Down, active: true, id: 3 ),
        (4, 4): Emitter( rotation: Down, active: true, id: 4 ),
        (5, 4): Emitter( rotation: Down, active: true, id: 5 ),
        (6, 4): Emitter( rotation: Down, active: true, id: 6 ),
        (7, 4): Emitter( rotation: Down, active: true, id: 7 ),

        (0, 0): Detector( id: 8 ),
        (1, 0): Detector( id: 9 ),
        (2, 0): Detector( id: 10 )
    },

    tests: Tests(
        lasers: [ 0, 1, 2, 3, 4, 5, 6, 7 ],
        detectors: [ 8, 9, 10 ],

        cases: [
            Cycle( lasers: [ false, false, false, false, true,  true,  false, true  ], detectors: [ [ false, false, false ] ] ),
            Cycle( lasers: [ true,  false, false, false, false, false, false, false ], detectors: [ [ true,  true,  true  ] ] ),
            Cycle( lasers: [ true,  false, true,  true,  false, false, false, false ], detectors: [ [ true,  false, false ] ] ),
            Cycle( lasers: [ true,  false, false, true,  false, false, false, false ], detectors: [ [ true,  false, false ] ] ),
            Cycle( lasers: [ true,  true,  false, false, true,  false, false, false ], detectors: [ [ false, true,  true  ] ] ),
            Cycle( lasers: [ true,  true,  true,  false, true,  true,  true,  false ], detectors: [ [ false, false, true  ] ] ),
            Cycle( lasers: [ true,  false, false, false, false, false, false, false ], detectors: [ [ true,  true,  true  ] ] ),
            Cycle( lasers: [ true,  true,  false, false, false, false, false, false ], detectors: [ [ true,  true,  false ] ] ),
            Cycle( lasers: [ false, false, true,  true,  true,  true,  false, true  ], detectors: [ [ false, false, false ] ] ),
            Cycle( lasers: [ true,  true,  false, false, false, false, false, false ], detectors: [ [ true,  true,  false ] ] ),
            Cycle( lasers: [ true,  true,  false, true,  true,  false, false, false ], detectors: [ [ false, true,  true  ] ] ),
            Cycle( lasers: [ true,  false, false, false, false, false, false, false ], detectors: [ [ true,  true,  true  ] ] ),
            Cycle( lasers: [ true,  false, true,  false, false, false, false, false ], detectors: [ [ true,  false, true  ] ] ),
            Cycle( lasers: [ false, true,  false, false, false, false, true,  false ], detectors: [ [ false, false, true  ] ] ),
            Cycle( lasers: [ true,  true,  true,  true,  false, false, false, false ], detectors: [ [ true,  false, false ] ] ),
            Cycle( lasers: [ false, true,  true,  true,  false, true,  false, false ], detectors: [ [ false, true,  false ] ] ),
        ]
    )
)

// Generated with the following code:
// let mut rng = rand::rng();
// for _ in 0..16 {
//     let trailing = rng.random_range(0..8);
//     let x = rng.random::<u8>() & !((1 << trailing) - 1);
//     println!("{x:0>8b} → {:0>3b}", x.trailing_zeros());
// }
