Level(
    id: "597b1d3d-0441-460f-870d-ed77749a07d7",
    name: "Adder Subtractor",
    description: "When the SUB is low, add the two 8-bit inputs (A + B), when SUB is high, subtract B from A (B - A).",
    parents: [ "92488235-9149-4595-aee4-e591acb013e7" ], // ← twos_compliment

    labels: {
        Dynamic(0): "A128",
        Dynamic(1): "A64",
        Dynamic(2): "A32",
        Dynamic(3): "A16",
        Dynamic(4): "A8",
        Dynamic(5): "A4",
        Dynamic(6): "A2",
        Dynamic(7): "A1",

        Dynamic(24): "SUB",

        Dynamic(8): "B128",
        Dynamic(9): "B64",
        Dynamic(10): "B32",
        Dynamic(11): "B16",
        Dynamic(12): "B8",
        Dynamic(13): "B4",
        Dynamic(14): "B2",
        Dynamic(15): "B1",

        Dynamic(16): "128",
        Dynamic(17): "64",
        Dynamic(18): "32",
        Dynamic(19): "16",
        Dynamic(20): "8",
        Dynamic(21): "4",
        Dynamic(22): "2",
        Dynamic(23): "1",
    },
    tiles: {
        (0, 4): Emitter( rotation: Down, active: true, id: 0 ),
        (1, 4): Emitter( rotation: Down, active: true, id: 1 ),
        (2, 4): Emitter( rotation: Down, active: true, id: 2 ),
        (3, 4): Emitter( rotation: Down, active: true, id: 3 ),
        (4, 4): Emitter( rotation: Down, active: true, id: 4 ),
        (5, 4): Emitter( rotation: Down, active: true, id: 5 ),
        (6, 4): Emitter( rotation: Down, active: true, id: 6 ),
        (7, 4): Emitter( rotation: Down, active: true, id: 7 ),

        (9, 4): Emitter( rotation: Down, active: true, id: 8 ),
        (10, 4): Emitter( rotation: Down, active: true, id: 9 ),
        (11, 4): Emitter( rotation: Down, active: true, id: 10 ),
        (12, 4): Emitter( rotation: Down, active: true, id: 11 ),
        (13, 4): Emitter( rotation: Down, active: true, id: 12 ),
        (14, 4): Emitter( rotation: Down, active: true, id: 13 ),
        (15, 4): Emitter( rotation: Down, active: true, id: 14 ),
        (16, 4): Emitter( rotation: Down, active: true, id: 15 ),

        (18, 4): Emitter( rotation: Down, active: true, id: 24 ),

        (0, 0): Detector( id: 16 ),
        (1, 0): Detector( id: 17 ),
        (2, 0): Detector( id: 18 ),
        (3, 0): Detector( id: 19 ),
        (4, 0): Detector( id: 20 ),
        (5, 0): Detector( id: 21 ),
        (6, 0): Detector( id: 22 ),
        (7, 0): Detector( id: 23 ),
    },

    tests: Tests(
        lasers: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 24 ],
        detectors: [ 16, 17, 18, 19, 20, 21, 22, 23 ],
        display: DisplayConfig(
            emitter_breaks: [ 7 ],
            descriptions: {
                0: "117 - 68 = 49",
                1: "23 + 93 = 116",
                2: "71 - 1 = 70",
                3: "234 - 175 = 59",
                4: "37 - 26 = 11",
                5: "222 - 31 = 191",
                6: "153 + 44 = 197",
                7: "242 - 230 = 12",
                8: "30 + 23 = 53",
                9: "99 + 80 = 179",
                10: "41 + 122 = 163",
                11: "47 + 26 = 73",
                12: "234 - 201 = 33",
                13: "81 + 64 = 145",
                14: "110 - 108 = 2",
                15: "64 + 10 = 74",
            },
        ),

        cases: [
            Cycle( lasers: [ false, true,  true,  true,  false, true,  false, true,  false, true,  false, false, false, true,  false, false, true  ], detectors: [ [ false, false, true,  true,  false, false, false, true  ] ] ),
            Cycle( lasers: [ false, false, false, true,  false, true,  true,  true,  false, true,  false, true,  true,  true,  false, true,  false ], detectors: [ [ false, true,  true,  true,  false, true,  false, false ] ] ),
            Cycle( lasers: [ false, true,  false, false, false, true,  true,  true,  false, false, false, false, false, false, false, true,  true  ], detectors: [ [ false, true,  false, false, false, true,  true,  false ] ] ),
            Cycle( lasers: [ true,  true,  true,  false, true,  false, true,  false, true,  false, true,  false, true,  true,  true,  true,  true  ], detectors: [ [ false, false, true,  true,  true,  false, true,  true  ] ] ),
            Cycle( lasers: [ false, false, true,  false, false, true,  false, true,  false, false, false, true,  true,  false, true,  false, true  ], detectors: [ [ false, false, false, false, true,  false, true,  true  ] ] ),
            Cycle( lasers: [ true,  true,  false, true,  true,  true,  true,  false, false, false, false, true,  true,  true,  true,  true,  true  ], detectors: [ [ true,  false, true,  true,  true,  true,  true,  true  ] ] ),
            Cycle( lasers: [ true,  false, false, true,  true,  false, false, true,  false, false, true,  false, true,  true,  false, false, false ], detectors: [ [ true,  true,  false, false, false, true,  false, true  ] ] ),
            Cycle( lasers: [ true,  true,  true,  true,  false, false, true,  false, true,  true,  true,  false, false, true,  true,  false, true  ], detectors: [ [ false, false, false, false, true,  true,  false, false ] ] ),
            Cycle( lasers: [ false, false, false, true,  true,  true,  true,  false, false, false, false, true,  false, true,  true,  true,  false ], detectors: [ [ false, false, true,  true,  false, true,  false, true  ] ] ),
            Cycle( lasers: [ false, true,  true,  false, false, false, true,  true,  false, true,  false, true,  false, false, false, false, false ], detectors: [ [ true,  false, true,  true,  false, false, true,  true  ] ] ),
            Cycle( lasers: [ false, false, true,  false, true,  false, false, true,  false, true,  true,  true,  true,  false, true,  false, false ], detectors: [ [ true,  false, true,  false, false, false, true,  true  ] ] ),
            Cycle( lasers: [ false, false, true,  false, true,  true,  true,  true,  false, false, false, true,  true,  false, true,  false, false ], detectors: [ [ false, true,  false, false, true,  false, false, true  ] ] ),
            Cycle( lasers: [ true,  true,  true,  false, true,  false, true,  false, true,  true,  false, false, true,  false, false, true,  true  ], detectors: [ [ false, false, true,  false, false, false, false, true  ] ] ),
            Cycle( lasers: [ false, true,  false, true,  false, false, false, true,  false, true,  false, false, false, false, false, false, false ], detectors: [ [ true,  false, false, true,  false, false, false, true  ] ] ),
            Cycle( lasers: [ false, true,  true,  false, true,  true,  true,  false, false, true,  true,  false, true,  true,  false, false, true  ], detectors: [ [ false, false, false, false, false, false, true,  false ] ] ),
            Cycle( lasers: [ false, true,  false, false, false, false, false, false, false, false, false, false, true,  false, true,  false, false ], detectors: [ [ false, true,  false, false, true,  false, true,  false ] ] ),
        ]
    )
)

// Test cases generated with the following code:
// let mut rng = rand::rng();
// for _ in 0..16 {
//     let sub = rng.random::<bool>();
//     let a = rng.random::<u8>();
//     let b = rng.random::<u8>();

//     let (l, s) = (a.max(b), a.min(b));
//     if sub {
//         println!("{l} - {s} = {}", l - s);
//         println!("{l:0>8b}{s:0>8b}1 → {:0>8b}", l - s);
//     } else {
//         println!("{s} + {} = {l}", l - s);
//         println!("{s:0>8b}{:0>8b}0 → {l:0>8b}", l - s);
//     }
// }
