Level(
    id: "ca887bfe-5c8c-425d-b414-265e6d8c909e",
    name: "Full Adder",
    description: "
        You have already built a half-adder, which can add two bits, but you can't directly tile it to add multi bit-values. For that, you will need a *full adder*, which takes in two input bits and a carry in. It then adds all the bits and outputs a sum and carry bit.

        By connecting a handful of these circuits, you can create a ripple-carry adder to add full binary numbers.",
    children: [ "2052ed73-edaf-45b7-8f2f-43993d558ff4", "eaab5121-8a05-49fd-8f6b-e364dd34bf48" ], // ‚Üê adder, find_first_set

    size: (14, 9),
    permanent: [
        (0, 8), (1, 8), (2, 8),
        (12, 0), (13, 0)
    ],
    labels: {
        Dynamic(0): "A",
        Dynamic(1): "B",
        Dynamic(2): "C-IN",

        Dynamic(3): "SUM",
        Dynamic(4): "C-OUT"
    },
    disabled: [ ],
    tiles: {
        (0, 8): Emitter( rotation: Down, active: false, id: 0 ),
        (1, 8): Emitter( rotation: Down, active: false, id: 1 ),
        (2, 8): Emitter( rotation: Down, active: false, id: 2 ),

        (12, 0): Detector( id: 3 ),
        (13, 0): Detector( id: 4 )
    },

    tests: Tests(
        lasers: [ 0, 1, 2 ],
        detectors: [ 3, 4 ],

        cases: [
            Cycle( lasers: [ false, false, false ], detectors: [ [ false, false ] ] ),
            Cycle( lasers: [ false, false, true  ], detectors: [ [ true,  false ] ] ),
            Cycle( lasers: [ false, true,  false ], detectors: [ [ true,  false ] ] ),
            Cycle( lasers: [ false, true,  true  ], detectors: [ [ false, true  ] ] ),
            Cycle( lasers: [ true,  false, false ], detectors: [ [ true,  false ] ] ),
            Cycle( lasers: [ true,  false, true  ], detectors: [ [ false, true  ] ] ),
            Cycle( lasers: [ true,  true,  false ], detectors: [ [ false, true  ] ] ),
            Cycle( lasers: [ true,  true,  true  ], detectors: [ [ true,  true  ] ] ),
        ]
    )
)

// Generated with the following code:

// for x in 0b000..=0b111 {
//     let a = x & 0b100 != 0;
//     let b = x & 0b010 != 0;
//     let c = x & 0b001 != 0;

//     let sum = a ^ b ^ c;
//     let carry = (a && b) || (c && (a ^ b));

//     println!("Cycle(
//     lasers: [ {a}, {b}, {c} ],
//     detectors: [ [ {sum}, {carry} ] ]
// ),");
// }
