Level(
    id: "321e6dc9-4be6-4624-9f37-3b84f799f6a0",
    name: "Two Way Multiplexer",
    description: "
        A multiplexer chooses one of its data inputs to forward to a single output.
        
        This level has two data inputs, D0 and D1, as well as a selector (S). When S is disabled pass the value at D0 to the output, when S is enabled pass the value at D1 to the output.",
    children: [ "f36846af-910b-4aec-8ed0-7e3deca17251" ], // ‚Üê read_only_memory

    size: (6, 6),
    permanent: [ (1, 5), (2, 5), (5, 5), (5, 0) ],
    labels: {
        Dynamic(0): "D1",
        Dynamic(1): "D0",
        Dynamic(2): "S"
    },
    tiles: {
        (2, 5): Emitter( rotation: Down, active: true, id: 0 ),
        (1, 5): Emitter( rotation: Down, active: true, id: 1 ),
        (5, 5): Emitter( rotation: Down, active: true, id: 2 ),
        (5, 0): Detector( id: 3 )
    },

    tests: Tests(
        lasers: [
            // Inputs
            0, 1,

            // Selector
            2
        ],
        detectors: [ 3 ],

        cases: [
            Cycle( lasers: [ false, false, false ], detectors: [ [ false ] ] ),
            Cycle( lasers: [ false, false, true  ], detectors: [ [ false ] ] ),
            Cycle( lasers: [ false, true,  false ], detectors: [ [ false ] ] ),
            Cycle( lasers: [ false, true,  true  ], detectors: [ [ true  ] ] ),
            Cycle( lasers: [ true,  false, false ], detectors: [ [ true  ] ] ),
            Cycle( lasers: [ true,  false, true  ], detectors: [ [ false ] ] ),
            Cycle( lasers: [ true,  true,  false ], detectors: [ [ true  ] ] ),
            Cycle( lasers: [ true,  true,  true  ], detectors: [ [ true  ] ] ),
        ]
    )
)

// Cases generated with:
// for i in 0b000..=0b111_u32 {
//     let a = i & 0b100 != 0;
//     let b = i & 0b010 != 0;
//     let s = i & 0b001 != 0;
//     println!("{a}, {b}, {s}: {}", [a, b][s as u8 as usize]);
// }
