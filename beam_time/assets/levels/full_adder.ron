Level(
    id: "ca887bfe-5c8c-425d-b414-265e6d8c909e",
    name: "Full Adder",
    description: "
        You have already built a half-adder, which can add two bits, but you can't directly tile it to add multi bit-values. For that, you will need a *full adder*, which takes in two input bits and a carry in. It then adds all the bits and outputs a sum and carry bit.
        
        By connecting a handful of these circuits, you can create a ripple-carry adder to add full binary numbers.",

    size: Some((14, 9)),
    permanent: [ 
        (0, 8), (1, 8), (2, 8),
        (12, 0), (13, 0)
    ],
    labels: {
        (0, 8): "A",
        (1, 8): "B",
        (2, 8): "C-In",

        (13, 0): "Sum",
        (14, 0): "C-Out"
    },
    disabled: [ ],
    tiles: {
        (0, 8): Emitter(
            rotation: Down,
            active: false
        ),
        (1, 8): Emitter(
            rotation: Down,
            active: false
        ),
        (2, 8): Emitter(
            rotation: Down,
            active: false
        ),

        (12, 0): Detector,
        (13, 0): Detector
    },

    tests: Tests(
        lasers: [ Static((0, 8)), Static((1, 8)), Static((2, 8)) ],
        detectors: [ Static((13, 0)), Static((14, 0)) ],

        cases: [
            Cycle(
                lasers: [ false, false, false ],
                detectors: [ [ false, false ] ]
            ),
            Cycle(
                lasers: [ false, false, true ],
                detectors: [ [ true, false ] ]
            ),
            Cycle(
                lasers: [ false, true, false ],
                detectors: [ [ true, false ] ]
            ),
            Cycle(
                lasers: [ false, true, true ],
                detectors: [ [ false, true ] ]
            ),
            Cycle(
                lasers: [ true, false, false ],
                detectors: [ [ true, false ] ]
            ),
            Cycle(
                lasers: [ true, false, true ],
                detectors: [ [ false, true ] ]
            ),
            Cycle(
                lasers: [ true, true, false ],
                detectors: [ [ false, true ] ]
            ),
            Cycle(
                lasers: [ true, true, true ],
                detectors: [ [ true, true ] ]
            ),
        ]
    )
)

// Generated with the following code:

// for x in 0b000..=0b111 {
//     let a = x & 0b100 != 0;
//     let b = x & 0b010 != 0;
//     let c = x & 0b001 != 0;

//     let sum = a ^ b ^ c;
//     let carry = (a && b) || (c && (a ^ b));

//     println!("Cycle(
//     lasers: [ {a}, {b}, {c} ],
//     detectors: [ [ {sum}, {carry} ] ]
// ),");
// }